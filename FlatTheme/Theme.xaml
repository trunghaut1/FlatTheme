<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:FlatTheme.Code">
    <!-- Import các Control -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="ControlStyle/FlatWindow.xaml"/>
        <ResourceDictionary Source="ControlStyle/ButtonControl.xaml"/>
        <ResourceDictionary Source="ControlStyle/CheckBoxControl.xaml"/>
        <ResourceDictionary Source="ControlStyle/RadioButtonControl.xaml"/>
        <ResourceDictionary Source="ControlStyle/ToggleButtonControl.xaml"/>
        <ResourceDictionary Source="ControlStyle/TextBoxControl.xaml"/>
        <ResourceDictionary Source="ControlStyle/PasswordBoxControl.xaml"/>
        <ResourceDictionary Source="ControlStyle/ComboBoxControl.xaml"/>
        <ResourceDictionary Source="ControlStyle/DatePickerControl.xaml"/>
        <ResourceDictionary Source="ControlStyle/MenuControl.xaml"/>
        <ResourceDictionary Source="ControlStyle/ListBoxControl.xaml"/>
        <ResourceDictionary Source="ControlStyle/DataGridControl.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    
    <!-- Áp dụng Style -->
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource FlatButton}"/>
    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource FlatCheckBox}"/>
    <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource FlatRadioButton}"/>
    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource FlatToggleButton}"/>
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource FlatTextBox}"/>
    <Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource FlatPasswordBox}"/>
    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource FlatComboBox}"/>
    <Style TargetType="{x:Type Calendar}" BasedOn="{StaticResource MaterialDesignCalendarPortrait}" />
    <Style TargetType="{x:Type DatePicker}" BasedOn="{StaticResource FlatDatePicker}"/>
    <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource FlatMenu}"/>
    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource FlatMenuItem}"/>
    <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource FlatListBox}"/>
    <Style TargetType="{x:Type DataGrid}" BasedOn="{StaticResource FlatDataGrid}"/>
    <Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource FlatDataGridCell}" />
    <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource FlatDataGridColumnHeader}" />
    <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource FlatDataGridRow}" />
    <Style TargetType="{x:Type DataGridRowHeader}" BasedOn="{StaticResource FlatDataGridRowHeader}" />

    <Style TargetType="{x:Type local:Ripple}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="ClipToBounds" Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:RippleAssist.ClipToBounds)}" />
        <Setter Property="Feedback" Value="{Binding RelativeSource={RelativeSource Self}, Path=Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Ripple}">
                    <Grid Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="Normal" To="MousePressed">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="ScaleTransform">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:2.2" Value="1">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseIn" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="ScaleTransform">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:2.2" Value="1">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseIn" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ClickEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value=".26"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:2.2" Value=".26"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="MousePressed" To="MouseOut">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="ScaleTransform">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="0">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseIn" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="ScaleTransform">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="0">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseIn" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ClickEllipse">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ClickEllipse" To="0" Duration="0:0:0.6"/>
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="ScaleTransform" To="1" Duration="0:0:0.6"/>
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="ScaleTransform" To="1" Duration="0:0:0.6"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MousePressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="ScaleTransform" To="1"/>
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="ScaleTransform" To="1"/>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ClickEllipse" To="0.26"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOut">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="ScaleTransform" To="0"/>
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="ScaleTransform" To="0"/>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ClickEllipse" To="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Canvas IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Ellipse x:Name="ClickEllipse" Fill="{TemplateBinding Feedback}" Opacity="0" 
                                     Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSize}" 
                                     Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleSize}" 
                                     Canvas.Left="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleX}" 
                                     Canvas.Top="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RippleY}"
                                     RenderTransformOrigin=".5,.5">
                                <Ellipse.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform x:Name="ScaleTransform" ScaleX="0" ScaleY="0" />
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform x:Name="TranslateTransform"/>
                                    </TransformGroup>
                                </Ellipse.RenderTransform>
                            </Ellipse>
                        </Canvas>
                        <ContentPresenter Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:Underline}">
        <Setter Property="Background" Value="{DynamicResource MainColor}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="Height" Value="2"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ControlTemplate.Resources>
                        <CircleEase x:Key="UnderlineEasingFunction" EasingMode="EaseOut"/>
                        <Storyboard x:Key="ExpandUnderlineBorderStoryboard">
                            <DoubleAnimation Storyboard.TargetName="UnderlineBorder"
                                                 Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                                 Duration="0:0:0.3"
                                                 EasingFunction="{StaticResource UnderlineEasingFunction}"
                                                 To="1"/>
                        </Storyboard>
                        <Storyboard x:Key="CollapseUnderlineBorderStoryboard">
                            <DoubleAnimation Storyboard.TargetName="UnderlineBorder"
                                                 Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                                 Duration="0:0:0.3"
                                                 EasingFunction="{StaticResource UnderlineEasingFunction}"
                                                 To="0"/>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="UnderlineBorder"
                            Background="{TemplateBinding Background}"
                            IsHitTestVisible="False"
                            Height="{TemplateBinding Height}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            RenderTransformOrigin="0.5,0.5">
                        <Border.RenderTransform>
                            <ScaleTransform ScaleX="0" ScaleY="1"/>
                        </Border.RenderTransform>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsActive}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource ExpandUnderlineBorderStoryboard}"/>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource CollapseUnderlineBorderStoryboard}"/>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:MaterialDateDisplay}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MaterialDateDisplay}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <StackPanel Orientation="Vertical"
                                    Margin="0">
                            <TextBlock x:Name="ComponentThreeTextBlock"
                                       Text="{TemplateBinding ComponentThreeContent}"
                                       HorizontalAlignment="Left"
                                       FontSize="16" FontWeight="Normal" />
                            <StackPanel x:Name="ComponentOneTwoWrapper" Orientation="Horizontal"
                                        HorizontalAlignment="Left">
                                <TextBlock Text="{TemplateBinding ComponentTwoContent}" FontSize="26" FontWeight="Normal" />
                                <TextBlock Text="{TemplateBinding ComponentOneContent}" Margin="10 0 0 0" FontSize="26" FontWeight="Normal" />
                            </StackPanel>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDayInFirstComponent" Value="True">
                            <Setter TargetName="ComponentThreeTextBlock" Property="Opacity" Value=".56"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ComponentThreeTextBlock" Property="Opacity" Value="1"/>
                            <Setter TargetName="ComponentOneTwoWrapper" Property="Opacity" Value=".56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type local:ListSortDirectionIndicator}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ListSortDirectionIndicator}">
                    <Viewbox Margin="0,0,0,0" >
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="Direction">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="None" GeneratedDuration="0" To="Ascending">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.2" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="path"/>
                                            <DoubleAnimation Duration="0:0:0.2" To="90" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="path" BeginTime="0:0:0.2"/>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="None" GeneratedDuration="0" To="Descending">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.2" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="path"/>
                                            <DoubleAnimation Duration="0:0:0.2" To="-90" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="path" BeginTime="0:0:0.2">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseOut"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Ascending" GeneratedDuration="0" To="Descending">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="path">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseOut"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <DoubleAnimation Duration="0:0:0.2" To="-90" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="path" From="90"/>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Ascending" GeneratedDuration="0" To="None">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="path"/>
                                            <DoubleAnimation Duration="0" To="90" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="path"/>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="path">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Descending" GeneratedDuration="0" To="Ascending">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0:0:0.2" To="90" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="path" From="-90"/>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Descending" GeneratedDuration="0" To="None">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="-90" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="path"/>
                                            <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="path"/>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="path">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="None">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="path">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Ascending">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="path">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="path">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="90"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Descending">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="path">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="-90"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="path">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Path x:Name="path" Data="M4,11V13H16L10.5,18.5L11.92,19.92L19.84,12L11.92,4.08L10.5,5.5L16,11H4Z" Fill="{TemplateBinding Foreground}" 
                        			RenderTransformOrigin="0.5,0.5" Height="24" Stretch="Fill" Width="24" >
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleY="0"/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>